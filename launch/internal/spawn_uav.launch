<?xml version="1.0"?>
<launch>

  <arg name="robot_namespace" 		default="/"		/>

  <arg name="x" 			default="0.0"		/>
  <arg name="y" 			default="0.0"		/>
  <arg name="z" 			default="0.08"		/>
  <arg name="roll"  			default="0" 		/>
  <arg name="pitch" 			default="0" 		/>
  <arg name="yaw"   			default="0" 		/>

  <arg name="enable_camera" 		default="true"		/>
  <arg name="enable_VI_sensor" 		default="false"		/>

  <arg name="enable_logging" 		default="false"		/>
  <arg name="enable_ground_truth" 	default="true"		/>
  <arg name="log_file" 			default="quad"		/>

  <arg name="tf_prefix" 		default=""		/>

  <arg name="name" 			default="quad"		/>
  <arg name="model" 			default="$(find quad_description)/urdf/kit_c_base.xacro"	/>
  
  <group ns="$(arg robot_namespace)">

  	<!-- spawn quad cam -->

  	<!-- send the robot XML to param server -->
  
	<param name="robot_description" command="
    						$(find xacro)/xacro.py '$(arg model)'
    						enable_logging:=$(arg enable_logging)
    						enable_ground_truth:=$(arg enable_ground_truth)
    						enable_camera:=$(arg enable_camera)
    						enable_VI_sensor:=$(arg enable_VI_sensor)
    						log_file:=$(arg log_file)"
  	/>



  	<param name="tf_prefix" 	type="string" 		value="$(arg tf_prefix)" 		/>

  	<!-- push robot_description to factory and spawn robot in gazebo -->
  
	<node name="spawn_quad" 	pkg="gazebo_ros" 	type="spawn_model"
   								args="	-param robot_description
         								-urdf
         								-x $(arg x)
         								-y $(arg y)
         								-z $(arg z)
	 								-R $(arg roll)
	 								-P $(arg pitch)
	 								-Y $(arg yaw)
         								-model $(arg name)"
   								respawn="false" 
								output="screen">
  	</node>


  	<!-- We do not have a robot connected, so publish fake joint states -->
  
	<node name="joint_state_publisher" 	pkg="joint_state_publisher" 	type="joint_state_publisher" 	/>

  	<!-- Given the published joint states, publish tf for the robot links -->
  
	<node name="robot_state_publisher" 	pkg="robot_state_publisher" 	type="robot_state_publisher" 	/>

  	<!-- spawn image viewer for camera -->
    
	<node pkg="image_view" 			type="image_view" 		name="image_view" >
      		<remap from="image" 		to="/$(arg name)/camera_/image_raw" />
    	</node>
   
     	<node name="joy_node" 			pkg="joy" 			type="joy_node">
      		<param name="dev" 		type="string" 			value="/dev/input/js0" 		/>
      		<param name="deadzone" 		value="0.12" 							/>
    	</node>


    	<node name="quad_joystick_interface" 	pkg="quad_joystick_interface" 	type="quad_joystick_interface" 	output="screen"	/> 

   	<node name="waypoint_node" 		pkg="quad_control" 		type="waypoint_publisher_node" 	output="screen"	/> 
    	
	<node name="position_controller_node" 	pkg="quad_control" 		type="position_controller_node" output="screen"> 
      		<rosparam command="load" 	file="$(find quad_gazebo)/resource/kit_c.yaml" 					/> 
      		<rosparam command="load" 	file="$(find quad_control)/resource/position_controller.yaml" 			/> 
   	</node> 
    
	<node name="attitude_controller_node" 	pkg="quad_control" 		type="attitude_controller_node" output="screen"> 
      		<rosparam command="load" 	file="$(find quad_gazebo)/resource/kit_c.yaml" 					/> 
      		<rosparam command="load" 	file="$(find quad_control)/resource/attitude_controller.yaml" 			/>  
    	</node> 

  </group>

</launch>

  

  

  
  
